import asyncio
import datetime
from pyrogram import Client
from config import START_IMG_URL, AUTO_GCAST_MSG, AUTO_GCAST, LOGGER_ID
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
from typing import Dict, List, Union
from VIPMUSIC.utils.database import get_served_chats_clone
from VIPMUSIC import userbot
from VIPMUSIC.core.mongo import mongodb, pymongodb

AUTO_GCAST = True

START_IMG_URLS = "https://telegra.ph/file/e309e8569e62a971b949e.jpg"

MESSAGES = f"""**„Ö§„Ö§„Ö§‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èüì°
üíó ‡§¶‡•Å‡§∂‡•ç‡§Æ‡§® ‡§π‡•Ä ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§ú‡§≤‡§® ‡§® ‡§π‡•ã ‡§î‡§∞ ‡§µ‡•ã ‡§á‡§∂‡•ç‡•ò ‡§π‡•Ä ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§ü‡§∂‡§® ‡§® ‡§π‡•ã üíó
‡§´‡•ç‡§∞‡•Ä ‡§ë‡§°‡§ø‡§ì  ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡•ã‡§á‡§® ‡§ï‡§∞‡•á ‡§Ø‡§π‡§æ ‡§∏‡§≠‡•Ä ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à


ü´ÇLink:-https://t.me/gkaudionotes01  ‚úÖ

**"""


BUTTONS = InlineKeyboardMarkup(
    [
        [
            InlineKeyboardButton(
                "‡πè Click FREE AUDIO NOTES  ‡πè",
                url=f"https://t.me/gkaudionotes01",
            )
        ]
    ]
)

MESSAGE = f"""**‡πè ·¥õ ú…™s …™s ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä  ô·¥è·¥õ “ì·¥è Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥òs + ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥†·¥Ñ. üíå

üéß ·¥ò ü·¥Ä è + ·¥†·¥ò ü·¥Ä è + ·¥Ñ·¥ò ü·¥Ä è üéß

‚û• s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á -  ü·¥á“ì·¥õ …¥·¥è·¥õ…™·¥Ñ·¥á, ·¥õ·¥Ä…¢·¥Ä ü ü, ·¥†·¥Ñ·¥õ·¥Ä…¢,  ô·¥Ä…¥ - ·¥ç·¥ú·¥õ·¥á, s ú·¥Ä è Ä…™,  ü·¥ú Ä…™·¥Ñs, s·¥è…¥…¢ - ·¥†…™·¥Ö·¥á·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö, ·¥á·¥õ·¥Ñ... ‚ù§Ô∏è

üîê·¥úÍú±·¥á ¬ª [/start](https://t.me/bestmunsicbot?start=help) ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã  ô·¥è·¥õ

‚û≤  ô·¥è·¥õ :** @bestmunsicbot"""

BUTTON = InlineKeyboardMarkup(
    [
        [
            InlineKeyboardButton(
                "‡πè ·¥ã…™·¥Ö…¥·¥Ä·¥ò ·¥ç·¥á ‡πè",
                url=f"https://t.me/bestmunsicbot?startgroup=s&admin=delete_messages+manage_video_chats+pin_messages+invite_users",
            )
        ]
    ]
)

caption = MESSAGES

TEXT = """**·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ …™s ·¥á…¥·¥Ä ô ü·¥á·¥Ö s·¥è ·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ/ ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ …™s ·¥Ö·¥è…™…¥ …™…¥ ·¥Ä ü ü ·¥Ñ ú·¥Ä·¥õs ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥è·¥ús ü è. **\n**…™·¥õ ·¥Ñ·¥Ä…¥  ô·¥á s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö  ô è ·¥ò·¥ú·¥õ ·¥†·¥Ä Ä…™·¥Ä ô ü·¥á [·¥Ä·¥ú·¥õ·¥è_…¢·¥Ñ·¥Äs·¥õ = (·¥ã·¥á·¥á·¥ò  ô ü·¥Ä…¥·¥ã & ·¥Ö·¥è…¥·¥õ ·¥° Ä…™·¥õ·¥á ·¥Ä…¥ è·¥õ ú…™…¥…¢)]**"""


async def send_message_to_chats(client: Client):
    try:
        chats = await get_served_chats_clone()

        for chat_info in chats:
            chat_id = chat_info.get("chat_id")
            if isinstance(chat_id, int):  # Check if chat_id is an integer
                try:
                    await client.send_photo(
                        chat_id,
                        photo=START_IMG_URLS,
                        caption=caption,
                        reply_markup=BUTTONS,
                    )
                    await asyncio.sleep(
                        1
                    )  # Sleep for 100 second between sending messages
                except Exception as e:
                    pass  # Do nothing if an error occurs while sending message
    except Exception as e:
        pass  # Do nothing if an error occurs while fetching served chats


async def continuous_cbroadcast():
    # Send TEXT once when bot starts

    while True:
        if AUTO_GCAST:
            try:
                await send_message_to_chats(client)
            except Exception as e:
                pass

        # Wait for 10000000000000000000 seconds before next broadcast
        await asyncio.sleep(5)


# Start the continuous broadcast loop if AUTO_GCAST is True
if AUTO_GCAST:
    asyncio.create_task(continuous_cbroadcast())
